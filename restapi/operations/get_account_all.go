// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAccountAllHandlerFunc turns a function with the right signature into a get account all handler
type GetAccountAllHandlerFunc func(GetAccountAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAccountAllHandlerFunc) Handle(params GetAccountAllParams) middleware.Responder {
	return fn(params)
}

// GetAccountAllHandler interface for that can handle valid get account all params
type GetAccountAllHandler interface {
	Handle(GetAccountAllParams) middleware.Responder
}

// NewGetAccountAll creates a new http.Handler for the get account all operation
func NewGetAccountAll(ctx *middleware.Context, handler GetAccountAllHandler) *GetAccountAll {
	return &GetAccountAll{Context: ctx, Handler: handler}
}

/*GetAccountAll swagger:route GET /account/all getAccountAll

dump all accounts in network

*/
type GetAccountAll struct {
	Context *middleware.Context
	Handler GetAccountAllHandler
}

func (o *GetAccountAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAccountAllParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
