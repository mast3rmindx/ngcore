// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetBlockHashOKCode is the HTTP code returned for type GetBlockHashOK
const GetBlockHashOKCode int = 200

/*GetBlockHashOK got the block

swagger:response getBlockHashOK
*/
type GetBlockHashOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetBlockHashOK creates GetBlockHashOK with default headers values
func NewGetBlockHashOK() *GetBlockHashOK {

	return &GetBlockHashOK{}
}

// WithPayload adds the payload to the get block hash o k response
func (o *GetBlockHashOK) WithPayload(payload interface{}) *GetBlockHashOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get block hash o k response
func (o *GetBlockHashOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBlockHashOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetBlockHashBadRequestCode is the HTTP code returned for type GetBlockHashBadRequest
const GetBlockHashBadRequestCode int = 400

/*GetBlockHashBadRequest Error

swagger:response getBlockHashBadRequest
*/
type GetBlockHashBadRequest struct {

	/*error text
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetBlockHashBadRequest creates GetBlockHashBadRequest with default headers values
func NewGetBlockHashBadRequest() *GetBlockHashBadRequest {

	return &GetBlockHashBadRequest{}
}

// WithPayload adds the payload to the get block hash bad request response
func (o *GetBlockHashBadRequest) WithPayload(payload string) *GetBlockHashBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get block hash bad request response
func (o *GetBlockHashBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBlockHashBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
