// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetAccountAllOKCode is the HTTP code returned for type GetAccountAllOK
const GetAccountAllOKCode int = 200

/*GetAccountAllOK OK

swagger:response getAccountAllOK
*/
type GetAccountAllOK struct {

	/*
	  In: Body
	*/
	Payload []interface{} `json:"body,omitempty"`
}

// NewGetAccountAllOK creates GetAccountAllOK with default headers values
func NewGetAccountAllOK() *GetAccountAllOK {

	return &GetAccountAllOK{}
}

// WithPayload adds the payload to the get account all o k response
func (o *GetAccountAllOK) WithPayload(payload []interface{}) *GetAccountAllOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account all o k response
func (o *GetAccountAllOK) SetPayload(payload []interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountAllOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]interface{}, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAccountAllBadRequestCode is the HTTP code returned for type GetAccountAllBadRequest
const GetAccountAllBadRequestCode int = 400

/*GetAccountAllBadRequest Error

swagger:response getAccountAllBadRequest
*/
type GetAccountAllBadRequest struct {

	/*error text
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAccountAllBadRequest creates GetAccountAllBadRequest with default headers values
func NewGetAccountAllBadRequest() *GetAccountAllBadRequest {

	return &GetAccountAllBadRequest{}
}

// WithPayload adds the payload to the get account all bad request response
func (o *GetAccountAllBadRequest) WithPayload(payload string) *GetAccountAllBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account all bad request response
func (o *GetAccountAllBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountAllBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
