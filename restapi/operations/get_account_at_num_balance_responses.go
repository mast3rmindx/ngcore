// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetAccountAtNumBalanceOKCode is the HTTP code returned for type GetAccountAtNumBalanceOK
const GetAccountAtNumBalanceOKCode int = 200

/*GetAccountAtNumBalanceOK OK

swagger:response getAccountAtNumBalanceOK
*/
type GetAccountAtNumBalanceOK struct {
}

// NewGetAccountAtNumBalanceOK creates GetAccountAtNumBalanceOK with default headers values
func NewGetAccountAtNumBalanceOK() *GetAccountAtNumBalanceOK {

	return &GetAccountAtNumBalanceOK{}
}

// WriteResponse to the client
func (o *GetAccountAtNumBalanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// GetAccountAtNumBalanceBadRequestCode is the HTTP code returned for type GetAccountAtNumBalanceBadRequest
const GetAccountAtNumBalanceBadRequestCode int = 400

/*GetAccountAtNumBalanceBadRequest Error

swagger:response getAccountAtNumBalanceBadRequest
*/
type GetAccountAtNumBalanceBadRequest struct {

	/*error text
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAccountAtNumBalanceBadRequest creates GetAccountAtNumBalanceBadRequest with default headers values
func NewGetAccountAtNumBalanceBadRequest() *GetAccountAtNumBalanceBadRequest {

	return &GetAccountAtNumBalanceBadRequest{}
}

// WithPayload adds the payload to the get account at num balance bad request response
func (o *GetAccountAtNumBalanceBadRequest) WithPayload(payload string) *GetAccountAtNumBalanceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get account at num balance bad request response
func (o *GetAccountAtNumBalanceBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAccountAtNumBalanceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
