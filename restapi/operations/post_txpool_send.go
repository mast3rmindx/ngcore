// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostTxpoolSendHandlerFunc turns a function with the right signature into a post txpool send handler
type PostTxpoolSendHandlerFunc func(PostTxpoolSendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTxpoolSendHandlerFunc) Handle(params PostTxpoolSendParams) middleware.Responder {
	return fn(params)
}

// PostTxpoolSendHandler interface for that can handle valid post txpool send params
type PostTxpoolSendHandler interface {
	Handle(PostTxpoolSendParams) middleware.Responder
}

// NewPostTxpoolSend creates a new http.Handler for the post txpool send operation
func NewPostTxpoolSend(ctx *middleware.Context, handler PostTxpoolSendHandler) *PostTxpoolSend {
	return &PostTxpoolSend{Context: ctx, Handler: handler}
}

/*PostTxpoolSend swagger:route POST /txpool/send postTxpoolSend

send tx into network

*/
type PostTxpoolSend struct {
	Context *middleware.Context
	Handler PostTxpoolSendHandler
}

func (o *PostTxpoolSend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostTxpoolSendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
