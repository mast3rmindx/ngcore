// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAccountNumBalanceHandlerFunc turns a function with the right signature into a get account num balance handler
type GetAccountNumBalanceHandlerFunc func(GetAccountNumBalanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAccountNumBalanceHandlerFunc) Handle(params GetAccountNumBalanceParams) middleware.Responder {
	return fn(params)
}

// GetAccountNumBalanceHandler interface for that can handle valid get account num balance params
type GetAccountNumBalanceHandler interface {
	Handle(GetAccountNumBalanceParams) middleware.Responder
}

// NewGetAccountNumBalance creates a new http.Handler for the get account num balance operation
func NewGetAccountNumBalance(ctx *middleware.Context, handler GetAccountNumBalanceHandler) *GetAccountNumBalance {
	return &GetAccountNumBalance{Context: ctx, Handler: handler}
}

/*GetAccountNumBalance swagger:route GET /account/{num}/balance getAccountNumBalance

get the balance of one account

*/
type GetAccountNumBalance struct {
	Context *middleware.Context
	Handler GetAccountNumBalanceHandler
}

func (o *GetAccountNumBalance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAccountNumBalanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
