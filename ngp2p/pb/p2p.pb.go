// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	ngtypes "github.com/ngchain/ngcore/ngtypes"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// common
type Header struct {
	NetworkId int32  `protobuf:"varint,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PeerKey   []byte `protobuf:"bytes,5,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"`
	Sign      []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *Header) Reset()      { *m = Header{} }
func (*Header) ProtoMessage() {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetNetworkId() int32 {
	if m != nil {
		return m.NetworkId
	}
	return 0
}

func (m *Header) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Header) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Header) GetPeerKey() []byte {
	if m != nil {
		return m.PeerKey
	}
	return nil
}

func (m *Header) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

// a protocol define a set of requests and responses
type Message struct {
	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Nonce   uint64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Payload []byte  `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Message) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// wired
type PingPongPayload struct {
	BlockHeight     uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	VaultHeight     uint64 `protobuf:"varint,2,opt,name=vault_height,json=vaultHeight,proto3" json:"vault_height,omitempty"`
	LatestBlockHash []byte `protobuf:"bytes,3,opt,name=latest_block_hash,json=latestBlockHash,proto3" json:"latest_block_hash,omitempty"`
	LatestVaultHash []byte `protobuf:"bytes,4,opt,name=latest_vault_hash,json=latestVaultHash,proto3" json:"latest_vault_hash,omitempty"`
}

func (m *PingPongPayload) Reset()      { *m = PingPongPayload{} }
func (*PingPongPayload) ProtoMessage() {}
func (*PingPongPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{2}
}
func (m *PingPongPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingPongPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingPongPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingPongPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingPongPayload.Merge(m, src)
}
func (m *PingPongPayload) XXX_Size() int {
	return m.Size()
}
func (m *PingPongPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PingPongPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PingPongPayload proto.InternalMessageInfo

func (m *PingPongPayload) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PingPongPayload) GetVaultHeight() uint64 {
	if m != nil {
		return m.VaultHeight
	}
	return 0
}

func (m *PingPongPayload) GetLatestBlockHash() []byte {
	if m != nil {
		return m.LatestBlockHash
	}
	return nil
}

func (m *PingPongPayload) GetLatestVaultHash() []byte {
	if m != nil {
		return m.LatestVaultHash
	}
	return nil
}

type GetChainPayload struct {
	VaultHeight uint64 `protobuf:"varint,1,opt,name=vault_height,json=vaultHeight,proto3" json:"vault_height,omitempty"`
}

func (m *GetChainPayload) Reset()      { *m = GetChainPayload{} }
func (*GetChainPayload) ProtoMessage() {}
func (*GetChainPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{3}
}
func (m *GetChainPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChainPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChainPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChainPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChainPayload.Merge(m, src)
}
func (m *GetChainPayload) XXX_Size() int {
	return m.Size()
}
func (m *GetChainPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChainPayload.DiscardUnknown(m)
}

var xxx_messageInfo_GetChainPayload proto.InternalMessageInfo

func (m *GetChainPayload) GetVaultHeight() uint64 {
	if m != nil {
		return m.VaultHeight
	}
	return 0
}

type ChainPayload struct {
	Vault        *ngtypes.Vault   `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault,omitempty"`
	Blocks       []*ngtypes.Block `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
	LatestHeight uint64           `protobuf:"varint,3,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
}

func (m *ChainPayload) Reset()      { *m = ChainPayload{} }
func (*ChainPayload) ProtoMessage() {}
func (*ChainPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{4}
}
func (m *ChainPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainPayload.Merge(m, src)
}
func (m *ChainPayload) XXX_Size() int {
	return m.Size()
}
func (m *ChainPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ChainPayload proto.InternalMessageInfo

func (m *ChainPayload) GetVault() *ngtypes.Vault {
	if m != nil {
		return m.Vault
	}
	return nil
}

func (m *ChainPayload) GetBlocks() []*ngtypes.Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *ChainPayload) GetLatestHeight() uint64 {
	if m != nil {
		return m.LatestHeight
	}
	return 0
}

type GetPoolPayload struct {
}

func (m *GetPoolPayload) Reset()      { *m = GetPoolPayload{} }
func (*GetPoolPayload) ProtoMessage() {}
func (*GetPoolPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{5}
}
func (m *GetPoolPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPoolPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolPayload.Merge(m, src)
}
func (m *GetPoolPayload) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolPayload.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolPayload proto.InternalMessageInfo

type PoolPayload struct {
	Txs []*ngtypes.Transaction `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *PoolPayload) Reset()      { *m = PoolPayload{} }
func (*PoolPayload) ProtoMessage() {}
func (*PoolPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{6}
}
func (m *PoolPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolPayload.Merge(m, src)
}
func (m *PoolPayload) XXX_Size() int {
	return m.Size()
}
func (m *PoolPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PoolPayload proto.InternalMessageInfo

func (m *PoolPayload) GetTxs() []*ngtypes.Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

// broadcast(pub-sub)
type BroadcastBlockPayload struct {
	Vault *ngtypes.Vault `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault,omitempty"`
	Block *ngtypes.Block `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *BroadcastBlockPayload) Reset()      { *m = BroadcastBlockPayload{} }
func (*BroadcastBlockPayload) ProtoMessage() {}
func (*BroadcastBlockPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fdddb109e6467a, []int{7}
}
func (m *BroadcastBlockPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BroadcastBlockPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BroadcastBlockPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BroadcastBlockPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastBlockPayload.Merge(m, src)
}
func (m *BroadcastBlockPayload) XXX_Size() int {
	return m.Size()
}
func (m *BroadcastBlockPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastBlockPayload.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastBlockPayload proto.InternalMessageInfo

func (m *BroadcastBlockPayload) GetVault() *ngtypes.Vault {
	if m != nil {
		return m.Vault
	}
	return nil
}

func (m *BroadcastBlockPayload) GetBlock() *ngtypes.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "pb.Header")
	proto.RegisterType((*Message)(nil), "pb.Message")
	proto.RegisterType((*PingPongPayload)(nil), "pb.PingPongPayload")
	proto.RegisterType((*GetChainPayload)(nil), "pb.GetChainPayload")
	proto.RegisterType((*ChainPayload)(nil), "pb.ChainPayload")
	proto.RegisterType((*GetPoolPayload)(nil), "pb.GetPoolPayload")
	proto.RegisterType((*PoolPayload)(nil), "pb.PoolPayload")
	proto.RegisterType((*BroadcastBlockPayload)(nil), "pb.BroadcastBlockPayload")
}

func init() { proto.RegisterFile("p2p.proto", fileDescriptor_e7fdddb109e6467a) }

var fileDescriptor_e7fdddb109e6467a = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xe3, 0xeb, 0x3f, 0xfa, 0xb6, 0x5c, 0xc1, 0x1c, 0x52, 0x40, 0x60, 0x95, 0x70, 0x3a,
	0x2a, 0x24, 0x52, 0xa9, 0xc0, 0x17, 0x28, 0xc3, 0x1d, 0x42, 0x48, 0x55, 0x84, 0x18, 0x90, 0x4e,
	0x95, 0x93, 0x58, 0x49, 0xd4, 0xd6, 0xb6, 0x62, 0x17, 0xe8, 0x06, 0x1b, 0x23, 0x1f, 0x83, 0x8d,
	0xaf, 0xc1, 0xd8, 0xf1, 0x46, 0x9a, 0x2e, 0x8c, 0xf7, 0x11, 0x50, 0x1c, 0x03, 0xad, 0x6e, 0x62,
	0x89, 0xfc, 0x3e, 0xef, 0x93, 0xf7, 0xf9, 0xd9, 0x89, 0xa1, 0x2d, 0x47, 0xd2, 0x97, 0xb9, 0xd0,
	0x02, 0x1f, 0xc8, 0xf0, 0xee, 0x2d, 0x9e, 0xe8, 0x95, 0x64, 0x6a, 0x68, 0x9e, 0x55, 0xc3, 0xfb,
	0x82, 0xa0, 0x79, 0xc6, 0x68, 0xcc, 0x72, 0x7c, 0x1f, 0x80, 0x33, 0xfd, 0x41, 0xe4, 0xb3, 0x69,
	0x16, 0xbb, 0xa8, 0x8f, 0x06, 0x8d, 0xa0, 0x6d, 0x95, 0x97, 0x31, 0xc6, 0x50, 0x5f, 0x2e, 0xb3,
	0xd8, 0x3d, 0xe8, 0xa3, 0x41, 0x3b, 0x30, 0x6b, 0x7c, 0x0f, 0xda, 0x3a, 0x5b, 0x30, 0xa5, 0xe9,
	0x42, 0xba, 0xb5, 0x3e, 0x1a, 0xd4, 0x82, 0x7f, 0x02, 0xbe, 0x03, 0xd7, 0x24, 0x63, 0xf9, 0x74,
	0xc6, 0x56, 0x6e, 0xa3, 0x8f, 0x06, 0xdd, 0xa0, 0x55, 0xd6, 0xaf, 0xd8, 0xaa, 0x1c, 0xa6, 0xb2,
	0x84, 0xbb, 0x4d, 0x23, 0x9b, 0xb5, 0x77, 0x0e, 0xad, 0xd7, 0x4c, 0x29, 0x9a, 0x30, 0xec, 0x41,
	0x33, 0x35, 0x50, 0x06, 0xa3, 0x33, 0x02, 0x5f, 0x86, 0x7e, 0x85, 0x19, 0xd8, 0x0e, 0x3e, 0x82,
	0x06, 0x17, 0x3c, 0x62, 0x06, 0xa8, 0x1e, 0x54, 0x05, 0x76, 0xa1, 0x25, 0xe9, 0x6a, 0x2e, 0x68,
	0x6c, 0x78, 0xca, 0xc8, 0xaa, 0xf4, 0xbe, 0x23, 0xe8, 0x4d, 0x32, 0x9e, 0x4c, 0x04, 0x4f, 0x26,
	0x95, 0x86, 0x1f, 0x40, 0x37, 0x9c, 0x8b, 0x68, 0x36, 0x4d, 0x59, 0x96, 0xa4, 0xda, 0xa4, 0xd5,
	0x83, 0x8e, 0xd1, 0xce, 0x8c, 0x54, 0x5a, 0xde, 0xd3, 0xe5, 0x5c, 0xff, 0xb1, 0x54, 0x69, 0x1d,
	0xa3, 0x59, 0xcb, 0x63, 0xb8, 0x39, 0xa7, 0x9a, 0x29, 0x3d, 0xb5, 0xc3, 0xa8, 0x4a, 0x6d, 0x7a,
	0xaf, 0x6a, 0x8c, 0xcd, 0x40, 0xaa, 0xd2, 0x1d, 0xaf, 0x9d, 0x5a, 0x7a, 0xeb, 0xbb, 0xde, 0xb7,
	0x66, 0x32, 0x55, 0xa9, 0xf7, 0x0c, 0x7a, 0xa7, 0x4c, 0xbf, 0x48, 0x69, 0xc6, 0x77, 0x80, 0xf7,
	0x68, 0xd0, 0x15, 0x1a, 0xef, 0x33, 0x82, 0xee, 0xde, 0x3b, 0xc7, 0xd0, 0x30, 0x7d, 0x7b, 0x96,
	0x87, 0xbe, 0xfd, 0x0f, 0x7c, 0x93, 0x14, 0x54, 0x4d, 0x7c, 0x02, 0x4d, 0x43, 0xaf, 0xdc, 0x83,
	0x7e, 0x6d, 0xcf, 0x66, 0xe0, 0x03, 0xdb, 0xc5, 0x0f, 0xe1, 0xba, 0xdd, 0x80, 0x45, 0xa8, 0x19,
	0x84, 0x6e, 0x25, 0x5a, 0x86, 0x1b, 0x70, 0x78, 0xca, 0xf4, 0x44, 0x88, 0xb9, 0x85, 0xf0, 0x9e,
	0x43, 0x67, 0xa7, 0xc4, 0x27, 0x50, 0xd3, 0x1f, 0x95, 0x8b, 0x4c, 0xd4, 0xd1, 0xdf, 0xa8, 0x37,
	0x39, 0xe5, 0x8a, 0x46, 0x3a, 0x13, 0x3c, 0x28, 0x0d, 0x5e, 0x04, 0xb7, 0xc7, 0xb9, 0xa0, 0x71,
	0x44, 0xed, 0x21, 0xfe, 0xdf, 0xa6, 0x8e, 0xa1, 0x61, 0xb0, 0xcd, 0x57, 0xbb, 0xba, 0xa7, 0xaa,
	0x39, 0x3e, 0x5f, 0x6f, 0x88, 0x73, 0xb1, 0x21, 0xce, 0xe5, 0x86, 0xa0, 0x4f, 0x05, 0x41, 0xdf,
	0x0a, 0x82, 0x7e, 0x14, 0x04, 0xad, 0x0b, 0x82, 0x7e, 0x16, 0x04, 0xfd, 0x2a, 0x88, 0x73, 0x59,
	0x10, 0xf4, 0x75, 0x4b, 0x9c, 0xf5, 0x96, 0x38, 0x17, 0x5b, 0xe2, 0xbc, 0x7b, 0x94, 0x64, 0x3a,
	0x5d, 0x86, 0x7e, 0x24, 0x16, 0x43, 0x9e, 0x64, 0xfc, 0x89, 0xbd, 0x2a, 0x43, 0x9e, 0x44, 0x22,
	0x67, 0x43, 0x9e, 0xc8, 0x91, 0x1c, 0xca, 0x30, 0x6c, 0x9a, 0x9b, 0xf6, 0xf4, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0xd5, 0x1a, 0x06, 0x8f, 0x03, 0x00, 0x00,
}

func (this *Header) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Header)
	if !ok {
		that2, ok := that.(Header)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetworkId != that1.NetworkId {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !bytes.Equal(this.PeerKey, that1.PeerKey) {
		return false
	}
	if !bytes.Equal(this.Sign, that1.Sign) {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Header.Equal(that1.Header) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *PingPongPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingPongPayload)
	if !ok {
		that2, ok := that.(PingPongPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.VaultHeight != that1.VaultHeight {
		return false
	}
	if !bytes.Equal(this.LatestBlockHash, that1.LatestBlockHash) {
		return false
	}
	if !bytes.Equal(this.LatestVaultHash, that1.LatestVaultHash) {
		return false
	}
	return true
}
func (this *GetChainPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetChainPayload)
	if !ok {
		that2, ok := that.(GetChainPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.VaultHeight != that1.VaultHeight {
		return false
	}
	return true
}
func (this *ChainPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainPayload)
	if !ok {
		that2, ok := that.(ChainPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vault.Equal(that1.Vault) {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	if this.LatestHeight != that1.LatestHeight {
		return false
	}
	return true
}
func (this *GetPoolPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetPoolPayload)
	if !ok {
		that2, ok := that.(GetPoolPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PoolPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PoolPayload)
	if !ok {
		that2, ok := that.(PoolPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Txs) != len(that1.Txs) {
		return false
	}
	for i := range this.Txs {
		if !this.Txs[i].Equal(that1.Txs[i]) {
			return false
		}
	}
	return true
}
func (this *BroadcastBlockPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BroadcastBlockPayload)
	if !ok {
		that2, ok := that.(BroadcastBlockPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Vault.Equal(that1.Vault) {
		return false
	}
	if !this.Block.Equal(that1.Block) {
		return false
	}
	return true
}
func (this *Header) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.Header{")
	s = append(s, "NetworkId: "+fmt.Sprintf("%#v", this.NetworkId)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "PeerKey: "+fmt.Sprintf("%#v", this.PeerKey)+",\n")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Message{")
	if this.Header != nil {
		s = append(s, "Header: "+fmt.Sprintf("%#v", this.Header)+",\n")
	}
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingPongPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.PingPongPayload{")
	s = append(s, "BlockHeight: "+fmt.Sprintf("%#v", this.BlockHeight)+",\n")
	s = append(s, "VaultHeight: "+fmt.Sprintf("%#v", this.VaultHeight)+",\n")
	s = append(s, "LatestBlockHash: "+fmt.Sprintf("%#v", this.LatestBlockHash)+",\n")
	s = append(s, "LatestVaultHash: "+fmt.Sprintf("%#v", this.LatestVaultHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetChainPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetChainPayload{")
	s = append(s, "VaultHeight: "+fmt.Sprintf("%#v", this.VaultHeight)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ChainPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ChainPayload{")
	if this.Vault != nil {
		s = append(s, "Vault: "+fmt.Sprintf("%#v", this.Vault)+",\n")
	}
	if this.Blocks != nil {
		s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	}
	s = append(s, "LatestHeight: "+fmt.Sprintf("%#v", this.LatestHeight)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetPoolPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.GetPoolPayload{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PoolPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PoolPayload{")
	if this.Txs != nil {
		s = append(s, "Txs: "+fmt.Sprintf("%#v", this.Txs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BroadcastBlockPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.BroadcastBlockPayload{")
	if this.Vault != nil {
		s = append(s, "Vault: "+fmt.Sprintf("%#v", this.Vault)+",\n")
	}
	if this.Block != nil {
		s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringP2P(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PeerKey) > 0 {
		i -= len(m.PeerKey)
		copy(dAtA[i:], m.PeerKey)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.PeerKey)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkId != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.NetworkId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Nonce != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingPongPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingPongPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingPongPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestVaultHash) > 0 {
		i -= len(m.LatestVaultHash)
		copy(dAtA[i:], m.LatestVaultHash)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.LatestVaultHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LatestBlockHash) > 0 {
		i -= len(m.LatestBlockHash)
		copy(dAtA[i:], m.LatestBlockHash)
		i = encodeVarintP2P(dAtA, i, uint64(len(m.LatestBlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.VaultHeight != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.VaultHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockHeight != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetChainPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChainPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChainPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultHeight != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.VaultHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestHeight != 0 {
		i = encodeVarintP2P(dAtA, i, uint64(m.LatestHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Blocks) > 0 {
		for iNdEx := len(m.Blocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Vault != nil {
		{
			size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPoolPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPoolPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PoolPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2P(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BroadcastBlockPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastBlockPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BroadcastBlockPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vault != nil {
		{
			size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2P(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintP2P(dAtA []byte, offset int, v uint64) int {
	offset -= sovP2P(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkId != 0 {
		n += 1 + sovP2P(uint64(m.NetworkId))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovP2P(uint64(m.Timestamp))
	}
	l = len(m.PeerKey)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovP2P(uint64(m.Nonce))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *PingPongPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovP2P(uint64(m.BlockHeight))
	}
	if m.VaultHeight != 0 {
		n += 1 + sovP2P(uint64(m.VaultHeight))
	}
	l = len(m.LatestBlockHash)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	l = len(m.LatestVaultHash)
	if l > 0 {
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func (m *GetChainPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultHeight != 0 {
		n += 1 + sovP2P(uint64(m.VaultHeight))
	}
	return n
}

func (m *ChainPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vault != nil {
		l = m.Vault.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	if m.LatestHeight != 0 {
		n += 1 + sovP2P(uint64(m.LatestHeight))
	}
	return n
}

func (m *GetPoolPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PoolPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovP2P(uint64(l))
		}
	}
	return n
}

func (m *BroadcastBlockPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vault != nil {
		l = m.Vault.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovP2P(uint64(l))
	}
	return n
}

func sovP2P(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP2P(x uint64) (n int) {
	return sovP2P(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Header) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Header{`,
		`NetworkId:` + fmt.Sprintf("%v", this.NetworkId) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`PeerKey:` + fmt.Sprintf("%v", this.PeerKey) + `,`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Header:` + strings.Replace(this.Header.String(), "Header", "Header", 1) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingPongPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingPongPayload{`,
		`BlockHeight:` + fmt.Sprintf("%v", this.BlockHeight) + `,`,
		`VaultHeight:` + fmt.Sprintf("%v", this.VaultHeight) + `,`,
		`LatestBlockHash:` + fmt.Sprintf("%v", this.LatestBlockHash) + `,`,
		`LatestVaultHash:` + fmt.Sprintf("%v", this.LatestVaultHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetChainPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetChainPayload{`,
		`VaultHeight:` + fmt.Sprintf("%v", this.VaultHeight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChainPayload) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBlocks := "[]*Block{"
	for _, f := range this.Blocks {
		repeatedStringForBlocks += strings.Replace(fmt.Sprintf("%v", f), "Block", "ngtypes.Block", 1) + ","
	}
	repeatedStringForBlocks += "}"
	s := strings.Join([]string{`&ChainPayload{`,
		`Vault:` + strings.Replace(fmt.Sprintf("%v", this.Vault), "Vault", "ngtypes.Vault", 1) + `,`,
		`Blocks:` + repeatedStringForBlocks + `,`,
		`LatestHeight:` + fmt.Sprintf("%v", this.LatestHeight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetPoolPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetPoolPayload{`,
		`}`,
	}, "")
	return s
}
func (this *PoolPayload) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTxs := "[]*Transaction{"
	for _, f := range this.Txs {
		repeatedStringForTxs += strings.Replace(fmt.Sprintf("%v", f), "Transaction", "ngtypes.Transaction", 1) + ","
	}
	repeatedStringForTxs += "}"
	s := strings.Join([]string{`&PoolPayload{`,
		`Txs:` + repeatedStringForTxs + `,`,
		`}`,
	}, "")
	return s
}
func (this *BroadcastBlockPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BroadcastBlockPayload{`,
		`Vault:` + strings.Replace(fmt.Sprintf("%v", this.Vault), "Vault", "ngtypes.Vault", 1) + `,`,
		`Block:` + strings.Replace(fmt.Sprintf("%v", this.Block), "Block", "ngtypes.Block", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringP2P(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			m.NetworkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerKey = append(m.PeerKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PeerKey == nil {
				m.PeerKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingPongPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingPongPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingPongPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultHeight", wireType)
			}
			m.VaultHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockHash = append(m.LatestBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockHash == nil {
				m.LatestBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVaultHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestVaultHash = append(m.LatestVaultHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestVaultHash == nil {
				m.LatestVaultHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChainPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChainPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChainPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultHeight", wireType)
			}
			m.VaultHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vault == nil {
				m.Vault = &ngtypes.Vault{}
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &ngtypes.Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			m.LatestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &ngtypes.Transaction{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastBlockPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastBlockPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastBlockPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vault == nil {
				m.Vault = &ngtypes.Vault{}
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2P
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2P
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &ngtypes.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2P(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthP2P
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2P(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2P
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2P
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP2P
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupP2P
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthP2P
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthP2P        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2P          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupP2P = fmt.Errorf("proto: unexpected end of group")
)
